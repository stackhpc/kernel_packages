---
- block:
  - name: Get kernel dependencies
    command:
      cmd: "yum deplist {{ kernel_repos[ansible_distribution_version] }}/kernel-{{ kernel_version }}.rpm"
      warn: false
    register: kernel_deplist
    changed_when: false
  - name: Install kernel-* dependencies
    # NB: assumes they're in the same repo!
    command:
      cmd: "yum install -y {{ kernel_repos[ansible_distribution_version] }}/{{ item.split()[1] | replace('-uname-r', '') + '-' + item.split()[3] + '.rpm'}}" # e.g. -> ".../kernel-core-4.18.0-193.1.2.el8_2.x86_64"
      warn: false
    register: yum_kernel_deps
    loop: "{{ kernel_deplist.stdout_lines }}" 
    changed_when: "'is already installed.' not in yum_kernel_deps.stdout"
    when: "'dependency: kernel-' in item" # e.g. item-> "  dependency: kernel-core-uname-r = 4.18.0-193.1.2.el8_2.x86_64"
  - name: Install kernel
    command: # for some reason the yum module sometimes thinks no change is needed!
      cmd: "yum install -y {{ kernel_repos[ansible_distribution_version] }}/kernel-{{ kernel_version }}.rpm"
      warn: false
      creates: "/boot/vmlinuz-{{ kernel_version }}"
    register: kernel_install
  when: ansible_kernel != kernel_version # means that as long as not changing the kernel we don't actually need to find the kernel in the repo.

- name: Install grubby
  yum:
    name: grubby
    state: present
- name: Set specified kernel as default for boot
  grubby:
    version: "{{ kernel_version }}" # TODO document returns?
  register: grubby
- name: Disable kernel upgrades changing default boot kernel
  replace:
    dest: /etc/sysconfig/kernel
    regexp: "^UPDATEDEFAULT="
    replace: "# UPDATEDEFAULT=yes"
- name: "Read yum.conf"
  ini_read:
    path: /etc/yum.conf
    section: main
  register: yum_conf_main
- set_fact:
    yum_conf_exclude: "{{ yum_conf_main.config.get('exclude', '').split() }}"
- name: Disable upgrades for kernel* in yum.conf
  ini_file:
    path: /etc/yum.conf
    section: main
    option: exclude
    value: "{{ ' '.join((yum_conf_exclude + ([] if 'kernel*' in yum_conf_exclude else ['kernel*']))) }}"
    no_extra_spaces: yes  
- name: Reboot if kernel updated
  reboot:
  when: grubby.changed or ansible_kernel != kernel_version # bit belt-and-braces in case somehow running kernel != default boot
  # TODO: use stackhpc.appliances/reboot_and_wait role here?
- name: Install packages
  yum:
    name: "{{ kernel_repos[ansible_distribution_version] }}/{{ item }}-{{ kernel_version }}.rpm"
    # name: "kernel-{{ item }}-{{ ansible_kernel }}"
    state: "{{ kernel_pkgs_state }}"
    disable_gpg_check: yes # TODO: fixme
  loop: "{{ kernel_pkgs }}"
